<?php

namespace Artisan\Api;

use Artisan\Api\Contracts\AdapterInterface;
use Artisan\Api\Contracts\RouterInterface;
use Artisan\Api\Controllers\GeneratorCommandController;
use Artisan\Api\Controllers\SingleCommandController;

/**
 * This class is responsible to add routes dynamiccaly and perform related
 * actions on routes.
 */
class Router implements RouterInterface
{

    /**
     * Default HTTP method; can be set within config/artisan.php
     *
     * @var string|array
     */
    protected string|array $method;

    /**
     * All added routes generated by pacakage
     *
     * @var array
     */
    protected array $routes = [];

    /**
     * Routes that are not commands but should do specific actions
     *
     * @var array
     */
    protected array $staticRoutes = [
        '/all',     // Get all available commands via REST APIs by this package
        '/command', // Provide route to client to add binded command within HTTP request
        '/docs',    // Show documents of available command through APIs
    ];
    
    /**
     * Instance of adapter to deal with commands
     *
     * @var AdapterInterface
     */
    protected AdapterInterface $adapter;

    /**
     * @inheritDoc
     */
    public function init(AdapterInterface $adapter)
    {
        $this->adapter = $adapter;

        $this->method = config('artisan.api.method', ['POST']);
        $this->prefix = config('artisan.api.prefix', '/artisan/api');

        $this->forbiddenRoutes = config('artisan.forbidden-routes');

        return $this;
    }

    /**
     * Generate routes by dynamic command's attributes; uses RouteAdapter to convert
     * command's attributes into readable string for Laravel routing system.
     *
     * @param boolean $withHiddens
     * @return void
     */
    public function generate(bool $withHiddens = false): void
    {
        $routeConfig = [
            'prefix' => $this->prefix,
            'middleware' => ['api', 'artisan.api']
        ];

        app('router')
            ->group($routeConfig, function ($router) use ($withHiddens) {

            // Add static routes
            foreach ($this->getStaticRoutes() as $route) {
                $router->addRoute($this->method, $route, $this->getAction());
            }

            // Add dynamic routes for each command
            foreach ($this->adapter->getAll() as $command) {

                // Prevents empty routes to be added from hidden commands
                if (!$uri = $this->adapter->toUri($command, $withHiddens))
                    continue;

                $route = $router->addRoute($this->method, $uri, $this->getAction($command));

                array_push($this->routes, $route->uri);
            }
        });

        $this->routes = array_unique($this->routes);
    }

    /**
     * Get action to be run when route reached.
     * Here we return controller to do actions for cleaner code,
     * we can still use a Closure function to do actions.
     * 
     * @param $command
     * @return array
     */
    protected function getAction($command = null)
    {
        if ($command && $this->adapter->isGenerator($command))
            return [GeneratorCommandController::class, 'run'];

        return [SingleCommandController::class, 'run'];
    }

    /**
     * @return array
     */
    public function getRoutes(): array
    {
        return $this->routes;
    }

    /**
     * @return array
     */
    protected function getStaticRoutes(): array
    {
        return $this->staticRoutes;
    }
}
